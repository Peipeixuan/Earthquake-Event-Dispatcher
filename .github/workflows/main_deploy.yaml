name: CD - Deploy to GCP VM via SSH

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GCP_REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_REPO: ${{ secrets.GCP_REPO }}
      BACKEND_IMAGE: backend
      FRONTEND_IMAGE: frontend
      INGEST_IMAGE: data_ingestion

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker auth to Artifact Registry
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker $GCP_REGISTRY

      - name: Release backend image
        run: |
          IMAGE="$GCP_REGISTRY/$GCP_PROJECT/$GCP_REPO/$BACKEND_IMAGE:develop"
          NEW_IMAGE="$GCP_REGISTRY/$GCP_PROJECT/$GCP_REPO/$BACKEND_IMAGE:main"
          docker pull "$IMAGE"
          docker tag "$IMAGE" "$NEW_IMAGE"
          docker push "$NEW_IMAGE"

      - name: Release frontend image
        run: |
          IMAGE="$GCP_REGISTRY/$GCP_PROJECT/$GCP_REPO/$FRONTEND_IMAGE:develop"
          NEW_IMAGE="$GCP_REGISTRY/$GCP_PROJECT/$GCP_REPO/$FRONTEND_IMAGE:main"
          docker pull "$IMAGE"
          docker tag "$IMAGE" "$NEW_IMAGE"
          docker push "$NEW_IMAGE"

      - name: Release data_ingestion image
        run: |
          IMAGE="$GCP_REGISTRY/$GCP_PROJECT/$GCP_REPO/$INGEST_IMAGE:develop"
          NEW_IMAGE="$GCP_REGISTRY/$GCP_PROJECT/$GCP_REPO/$INGEST_IMAGE:main"
          docker pull "$IMAGE"
          docker tag "$IMAGE" "$NEW_IMAGE"
          docker push "$NEW_IMAGE"

  deploy-to-vm:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GCE_VM_IP }}
          username: ${{ secrets.GCE_VM_USER }}
          key: ${{ secrets.GCE_SSH_KEY }}
          port: 22
          script: |
            cd /earthquake-event-dispatcher/Earthquake-Event-Dispatcher
            git fetch origin
            git checkout main
            git reset --hard origin/main

            docker compose -f docker-compose.prod.yml pull

            docker compose -f docker-compose.prod.yml up -d --no-deps backend frontend prometheus grafana data_ingestion nginx nginx_exporter

      - name: Wait for service to be ready
        run: sleep 15
      
      # 使用 curl 檢查狀態碼是否為 200
      - name: Backend - Health check - status code
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://34.81.36.176/api/)
          if [ "$STATUS" != "200" ]; then
            echo "Backend 網站未正常回應，狀態碼: $STATUS"
            exit 1
          else
            echo "Backend 正常回應"
          fi

      - name: Frontend - Health check - status code
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://34.81.36.176/simulation)
          if [ "$STATUS" != "200" ]; then
            echo "Frontend 未正常回應，狀態碼: $STATUS"
            exit 1
          else
            echo "Frontend 正常回應"
          fi
      
      - name: Prometheus - Health check - status code
        run: |
          STATUS=$(curl -L -s -o /dev/null -w "%{http_code}" http://34.81.36.176/prometheus/query)
          if [ "$STATUS" != "200" ]; then
            echo "Prometheus 未正常回應，狀態碼: $STATUS"
            exit 1
          else
            echo "Prometheus 正常回應"
          fi

      - name: Grafana - Health check - status code
        run: |
          STATUS=$(curl -L -s -o /dev/null -w "%{http_code}" http://34.81.36.176/grafana/)
          if [ "$STATUS" != "200" ]; then
            echo "Grafana 未正常回應，狀態碼: $STATUS"
            exit 1
          else
            echo "Grafana 正常回應"
          fi
